
name: Build and Release nexusiq-get-metrics

on:
  push:
    tags:
      - '*'

env:
  IMAGE_NAME: nexusiq-get-metrics
  RELEASE_BRANCH: main
  RELEASE_VERSION: ${{ github.ref_name }}

jobs:

    build_application:
        name: build metrics application
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        - name: Set up JDK 8
          uses: actions/setup-java@v2
          with:
            java-version: '8'
            distribution: 'adopt'
        
        - name: Cache Gradle packages
          uses: actions/cache@v2
          with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              ${{ runner.os }}-gradle-
      
        - name: Grant execute permission for gradlew
          run: chmod +x gradlew
          
        - name: Build with Gradle
          run: ./gradlew -Pversion=$RELEASE_VERSION clean build
          
        - name: List files
          run: |
            ls -lR 

        - name: Upload the artifact
          uses: actions/upload-artifact@v2
          with:
            path: build/libs

    # create_release:
    #     needs: [build_application]
    #     name: create release bundle
    #     runs-on: ubuntu-latest
        
    #     steps:
    #     - uses: actions/checkout@v2

    #     - name: Download all artifacts
    #       uses: actions/download-artifact@v2

    #     - name: Build release with Gradle
    #       run: ./gradlew release

    #     - name: Create release
    #       uses: softprops/action-gh-release@v1
    #       if: startsWith(github.ref, 'refs/tags/')
    #       with:
    #         files: metrics-*.zip

    # build_docker_image:
    #     needs: build_application
    #     name: build docker image
    #     runs-on: ubuntu-latest
    #     steps:
        
    #     - uses: actions/checkout@v2
        
    #     - name: Download the application file
    #       uses: actions/download-artifact@v2
    #       with:
    #         name: metrics.jar

    #     - name: Build image
    #       run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

    #     - name: Log in to registry
    #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    #     - name: Push image
    #       run: |
    #           IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

    #           # Change all uppercase to lowercase
    #           IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

    #           # Strip git ref prefix from version
    #           VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

    #           # Strip "v" prefix from tag name
    #           [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

    #           # Use Docker `latest` tag convention
    #           [ "$VERSION" == "$RELEASE_BRANCH" ] && VERSION=latest

    #           echo IMAGE_ID=$IMAGE_ID
    #           echo VERSION=$VERSION

    #           docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
    #           docker push $IMAGE_ID:$VERSION

    
